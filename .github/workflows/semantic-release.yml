name: Semantic Release for Apps

on:
  push:
    branches:
      - master
    paths:
      - 'modules/**'
permissions: write-all

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        id: checkout
        with:
          fetch-depth: 0

      # Get the folder path of changed files
      - name: Get changed directories
        id: changed_dirs
        run: |
          echo "::set-output name=dirs::$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | awk -F/ 'BEGIN{OFS=FS} NF--' | sort | uniq)"

      # Update the tag format and determine the path to the CHANGELOG.md file for each changed directory
      - name: Update tag format and determine CHANGELOG.md path
        id: update_tag_changelog
        run: |
          APP_DIRS="${{ steps.changed_dirs.outputs.dirs }}"
          while IFS= read -r dir; do
            APP_NAME=$(echo "$dir" | awk '{print tolower($0)}')
            echo "::set-output name=tag_format::$APP_NAME-v\${version}"
            if [[ -f "$dir/CHANGELOG.md" ]]; then
              echo "::set-output name=path::$dir/CHANGELOG.md"
            fi
          done <<< "$APP_DIRS"

      # Run semantic release for each changed directory
      - name: Semantic Release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB2 }}
        run: |
          APP_DIRS="${{ steps.changed_dirs.outputs.dirs }}"
          while IFS= read -r dir; do
            TAG_FORMAT=$(echo "$dir" | awk '{print tolower($0)}')-v\${version}
            CHANGELOG_PATH="$dir/CHANGELOG.md"
            if [[ -f "$CHANGELOG_PATH" ]]; then
              echo "Running semantic release for $dir"
              docker run --rm -v ${{ github.workspace }}:/github/workspace -w /github/workspace \
                -e GITHUB_TOKEN="${GITHUB_TOKEN}" \
                ghcr.io/codfish/semantic-release-action:v2 \
                --tag-format "$TAG_FORMAT" \
                --additional-packages='["@semantic-release/changelog", "@semantic-release/git"]' \
                --plugins='["@semantic-release/commit-analyzer", "@semantic-release/release-notes-generator", ["@semantic-release/changelog", { "changelogFile": "$CHANGELOG_PATH" }], "@semantic-release/github", ["@semantic-release/git", { "assets": ["$CHANGELOG_PATH"] }]]'
            fi
          done <<< "$APP_DIRS"

      - name: Semantic Release Output Summary
        id: semantic_summary
        run: |
          echo "### Semantic Version = ${{ steps.semantic.outputs.release-version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ toJson(steps.semantic.outputs) }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true



# name: Semantic Release for Apps

# on:
#   push:
#     branches:
#       - master
#     paths:
#     - 'modules/**'
# permissions: write-all

# jobs:
#   release:
#     name: Semantic Release
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#         id: checkout
#         with:
#           fetch-depth: 0

#       # Get the name of the directory that was changed
#       - name: Get changed directories
#         id: changed_dirs
#         run: |
#           echo "::set-output name=dirs::$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | awk -F/ '{print $0}' | sort -u)"

#       # Check if there are any tags available
#       - name: Check for tags
#         id: check_tags
#         run: |
#           if [[ -z $(git tag -l) ]]; then
#             echo "::set-output name=has_tags::false"
#           else
#             echo "::set-output name=has_tags::true"
#           fi

#       # Update the tag format to include the name of the directory
#       - name: Update tag format
#         id: update_tag_format
#         run: |
#           APP_NAME=$(echo "${{ steps.changed_dirs.outputs.dirs }}" | awk '{print tolower($0)}')
#           echo "::set-output name=tag_format::${APP_NAME}-v\${version}"

#         # Add new version to changelog or set initial version if no tags are available
#       - name: Add new version to changelog
#         id: add_version_to_changelog
#         run: |
#             if [[ "${{ steps.check_tags.outputs.has_tags }}" == "true" ]]; then
#             version=$(git describe --tags --abbrev=0)
#             else
#             version="1.0.0"
#             echo "## Changelog" > CHANGELOG.md
#             fi
#             sed -i "s|\[[0-9]\+\.[0-9]\+\.[0-9]\+\]|[${version}] $(date +'%Y-%m-%d')|" CHANGELOG.md
            
#       # https://github.com/marketplace/actions/semantic-release-action#usage
#       - name: Semantic Release
#         uses: docker://ghcr.io/codfish/semantic-release-action:v2
#         id: semantic
#         env:
#           GITHUB_TOKEN: ${{ secrets.PAT_GITHUB2 }}
#         with:
#           tag_format: '${{ steps.update_tag_format.outputs.tag_format }}'
#           additional_packages: |
#             ['@semantic-release/changelog', '@semantic-release/git']
#           plugins: |
#             ['@semantic-release/commit-analyzer', '@semantic-release/release-notes-generator', ['@semantic-release/changelog', {changelogTitle: '# CHANGELOG', "changelogFile": "modules/aws/eks/eks-simple/modules/CHANGELOG.md"}], '@semantic-release/github', ['@semantic-release/git', {
#               "assets": ["modules/aws/eks/eks-simple/modules/CHANGELOG.md"]
#             }]]
#           # specify default branches to add support for the `main` branch
#           # which semantic-release doesn't have as a default yet.
#           branches: |
#             [
#               'master'
#             ]
#       # Get the latest version tag
#       - name: Get latest version tag
#         run: |
#           version=$(git describe --tags --abbrev=0)
#           echo "::set-output name=version::$version"

#       - name: Semantic Release Output Summary
#         id: semantic_summary
#         run: |
#           echo "### Semantic Version = ${{ steps.semantic.outputs.release-version }}\`" >> $GITHUB_STEP_SUMMARY
#           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
#           echo "${{ toJson(steps.semantic.outputs) }}" >> $GITHUB_STEP_SUMMARY
#           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
#         continue-on-error: true